/**
 * @file matchdisplay.h
 * @author Sanjayan Kulendran
 * @brief Header file used to declare the qt5 based matchDisplay class.
 * Simple UI displaying the status of a match (player A and B game wins0
 * Also has a button allowing the direct launching of games, which converts to a close button on completion
 *
 * @version 1.0
 * @date 2020-11-30
 *
 *
 * @copyright Copyright (c) 2020
 *
 */

#ifndef MATCHDISPLAY_H
#define MATCHDISPLAY_H

#include <QDialog>
#include <QLCDNumber>
#include <QTimer>
#include <vector>

#include "gamedisplay.h"
#include "player.h"
#include "tableconfigurationsettings.h"
#include "usermatchsettings.h"
#include "game.h"


namespace Ui {
class matchDisplay;
}

/**
 *
 * @brief Simple UI displaying the status of a match (player A and B game wins)
 * Also has a button allowing the direct launching of games, which converts to a close button on completion
 *
 */
class matchDisplay : public QDialog
{
    Q_OBJECT

public:
    /**
     * @brief matchDisplay - constructor that takes all the same parameters as game display, passes them along and wraps it to control match flow of the game
     * @param parent - Pointer to the calling qt window
     * @param matchSettingsObjPtr - Pointer to readable match settings object
     * @param tableConfigObjPtr - Pointer to readable table configurations object
     * @param playerAObjPtr - Pointer to readable player object representing Player A
     * @param playerBObjPtr - Pointer to readable player object representing Player B
     * @param gamesInMatchReturnPointer - Reference to game vector used for passing back data about games in a match
     */
    explicit matchDisplay(std::vector<game> &gamesInMatchReturnPointer, QWidget *parent = nullptr, usermatchsettings *matchSettingsObjPtr = nullptr, tableconfigurationsettings *tableConfigObjPtr = nullptr,  player *playerAObjPtr = nullptr, player *playerBObjPtr = nullptr);

    /**
     * @brief sDestructor for the class
     */
    ~matchDisplay();

private slots:
    /**
     * @brief on_pushButton_clicked - Function that launches games within the match when button is pressed, and exits match when match victory is reached
     */
    void on_pushButton_clicked();

private:

    Ui::matchDisplay *ui; //!< QT5 autogenerated pointer to ui

    std::vector<game> *gamesInMatch; //!< Pointer to the Vector that stores the amount of games in a match

    int firstTo; //!<Integer that stores the amount of games needed for victory (simple calcualtion from best of)
    int playerAVictories; //!<Integer that counts the amount of victories for player A
    int playerBVictories; //!<Integer that counts the amount of victories for player A

    bool matchOver; //!<Boolean variable that keeps track of if the match is over

    usermatchsettings *savedMatchSettingsObjPtr; //!< Reference to passed in match settings object
    tableconfigurationsettings *savedTableConfigObjPtr; //!< Reference to passed in table configurations object
    player *savedPlayerAObjPtr; //!< Reference to passed in player a object
    player *savedPlayerBObjPtr; //!< Reference to passed in player b object


    gameDisplay *gameDisplayPtr; //!< Stores pointer to current game display
};

#endif // MATCHDISPLAY_H
