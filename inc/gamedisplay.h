/**
 * @file gamedisplay.h
 * @author Sanjayan Kulendran
 * @brief Header file used to declare the qt5 based gameDisplay class.
 * UI displaying points and shot speeds for two players
 * Can handle games with a point threshold for victory or a game timer, with a clock that counts up or down respectively
 * Functionality for pausing, resuming, and exiting a game
 * Adds executed game to an optionally given vector of game class objects to facilitate multi-game matches
 * Uses messagehandler class to demonstrate asynchronus communication with an embedded system
 * @version 1.0
 * @date 2020-11-30
 *
 *
 * @copyright Copyright (c) 2020
 *
 */

#ifndef GAMEDISPLAY_H
#define GAMEDISPLAY_H

#include <QDialog>
#include <QLCDNumber>
#include <QTimer>
#include <vector>
#include "player.h"
#include "tableconfigurationsettings.h"
#include "usermatchsettings.h"
#include "game.h"


#include "MessagePacket.h"
#include "MessageHandler.h"
#include "MessageLibrary.h"

namespace Ui {
class gameDisplay;
}


class gameDisplay : public QDialog
{
    Q_OBJECT

public:
    /**
     * @brief gameDisplay - Constructor taking in references to the initialization paramters needed for a game
     * @param parent - Pointer to the calling qt window
     * @param matchSettingsObjPtr - Pointer to readable match settings object
     * @param tableConfigObjPtr - Pointer to readable table configurations object
     * @param playerAObjPtr - Pointer to readable player object representing Player A
     * @param playerBObjPtr - Pointer to readable player object representing Player B
     * @param gameReturnPointer - Reference to game vector
     */
    explicit gameDisplay(std::vector<game> &gameReturnPointer, QWidget *parent = nullptr, usermatchsettings *matchSettingsObjPtr = nullptr, tableconfigurationsettings *tableConfigObjPtr = nullptr,  player *playerAObjPtr = nullptr, player *playerBObjPtr = nullptr);

    /**
      * @brief Destructor for the class.
      *
      **/
    ~gameDisplay();

public slots:

    /**
     * @brief displayUpdate - Function that updates the game display, typically bounded to the game time updater variable
     */
    void displayUpdate();

    /**
     * @brief updateScore - Functiont that checks the message queue and updates the game with the needed goals
     */
    void updateScore();


private slots:

    /**
     * @brief on_playPausepushButton_clicked - Alternates between clicked and unclicked, signal that pauses and resumes the game
     * @param checked - boolean state of the button 'true' if checked
     */
    void on_playPausepushButton_clicked(bool checked);

    /**
     * @brief on_exitButton_clicked - Terminates the game early, winner is player with more points
     */
    void on_exitButton_clicked();

private:

    Ui::gameDisplay *ui; //!< QT5 autogenerated pointer to ui
    game *currentGame; //!< Points to the current game - Will be replaced with match
    std::vector<game> *gameVector; //!<Pointer to game vector to append finished game into

    double displayUpdateInterval; //!< Update interval of display in milliseconds
    double messagePollInterval; //!< Update interval of message poller in milliseconds
    double gameTime; //!< Current game time in seconds

    bool gamePaused;//!< Tracks wheather the game is paused

    player *playerA; //!< Player A
    player *playerB; //!< Player B

    QTimer *gameTimeUpdater; //!< Pointer for the the game timer (The trigger interval to update the display)
    QTimer *messagePollTimer; //!< Timer for message poll timer (Governs the interval at which we read messages from the embeded system)


};

#endif // GAMEDISPLAY_H
